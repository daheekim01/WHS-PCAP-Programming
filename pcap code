#include <stdlib.h>
#include <stdio.h>
#include <pcap.h>
#include <arpa/inet.h>

/* Ethernet header */
struct ethheader {
  u_char  ether_dhost[6]; /* destination host address */
  u_char  ether_shost[6]; /* source host address */
  u_short ether_type;     /* protocol type (IP, ARP, RARP, etc) */
};

/* IP Header */
struct ipheader {
  unsigned char      iph_ihl:4, //IP header length
                     iph_ver:4; //IP version
  unsigned char      iph_tos; //Type of service
  unsigned short int iph_len; //IP Packet length (data + header)
  unsigned short int iph_ident; //Identification
  unsigned short int iph_flag:3, //Fragmentation flags
                     iph_offset:13; //Flags offset
  unsigned char      iph_ttl; //Time to Live
  unsigned char      iph_protocol; //Protocol type
  unsigned short int iph_chksum; //IP datagram checksum
  struct  in_addr    iph_sourceip; //Source IP address
  struct  in_addr    iph_destip;   //Destination IP address
};

/* TCP Header */
struct tcpheader {
  unsigned short int tcp_src_port;   // source port
  unsigned short int tcp_dest_port;  // destination port
  unsigned int       tcp_seq;        // sequence number
  unsigned int       tcp_ack;        // acknowledgement number
  unsigned char      tcp_reserved:4, tcp_offset:4; // data offset
  unsigned char      tcp_flags;      // TCP flags (CWR, ECE, URG, ACK, PSH, RST, SYN, FIN)
  unsigned short int tcp_window;     // window size
  unsigned short int tcp_checksum;   // checksum
  unsigned short int tcp_urgentptr;  // urgent pointer
};

void got_packet(u_char *args, const struct pcap_pkthdr *header,
                              const u_char *packet)
{
  struct ethheader *eth = (struct ethheader *)packet;

  if (ntohs(eth->ether_type) == 0x0800) { // 0x0800 is IP type
    struct ipheader * ip = (struct ipheader *)
                           (packet + sizeof(struct ethheader));

    // only TCP protocol
    if (ip->iph_protocol != IPPROTO_TCP)
        return;

    // ip_header_len
    int ip_header_len = ip->iph_ihl * 4;

    // tcpheader
    struct tcpheader *tcp = (struct tcpheader *)(packet + sizeof(struct ethheader) + ip_header_len);

    // IP 주소를 문자열로 변환하여 저장
    char src_ip[INET_ADDRSTRLEN], dst_ip[INET_ADDRSTRLEN];
    inet_ntop(AF_INET, &(ip->iph_sourceip), src_ip, INET_ADDRSTRLEN);
    inet_ntop(AF_INET, &(ip->iph_destip), dst_ip, INET_ADDRSTRLEN);

    // TCP Packet 출력
    printf("Ethernet Header\n");
    printf("Src MAC: %02x:%02x:%02x:%02x:%02x:%02x\n", eth->ether_shost[0], eth->ether_shost[1], eth->ether_shost[2], eth->ether_shost[3], eth->ether_shost[4], eth->ether_shost[5]);
    printf("Dst MAC: %02x:%02x:%02x:%02x:%02x:%02x\n", eth->ether_dhost[0], eth->ether_dhost[1], eth->ether_dhost[2], eth->ether_dhost[3], eth->ether_dhost[4], eth->ether_dhost[5]);
    printf("IP Header\n");
    printf("Src IP: %s\n", src_ip);
    printf("Dst IP: %s\n", dst_ip);
    printf("TCP Header\n");
    printf("Src Port: %u\n", ntohs(tcp->tcp_src_port));
    printf("Dst Port: %u\n", ntohs(tcp->tcp_dest_port));

    // message 출력
    printf("Message: ");
    for (int i = 0; i < 48; i++)
        printf("%02x ", packet[ip_header_len + sizeof(struct tcpheader) + i]);
    printf("\n\n");
  }
}

// sniff_improved.c
int main()
{
  pcap_t *handle;
  char errbuf[PCAP_ERRBUF_SIZE];
  struct bpf_program fp;
  char filter_exp[] = "tcp";
  bpf_u_int32 net;

  // Step 1: Open live pcap session on NIC with name enp0s3
  handle = pcap_open_live("enp0s3", BUFSIZ, 1, 1000, errbuf);

  // Step 2: Compile filter_exp into BPF psuedo-code
  pcap_compile(handle, &fp, filter_exp, 0, net);
  if (pcap_setfilter(handle, &fp) !=0) {
      pcap_perror(handle, "Error:");
      exit(EXIT_FAILURE);
  }

  // Step 3: Capture packets
  pcap_loop(handle, -1, got_packet, NULL);

  pcap_close(handle);   //Close the handle
  return 0;
}
